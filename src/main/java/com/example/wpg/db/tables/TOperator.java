/*
 * This file is generated by jOOQ.
 */
package com.example.wpg.db.tables;


import com.example.wpg.db.Keys;
import com.example.wpg.db.Wpg;
import com.example.wpg.db.tables.records.OperatorRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TOperator extends TableImpl<OperatorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wpg.operator</code>
     */
    public static final TOperator OPERATOR = new TOperator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperatorRecord> getRecordType() {
        return OperatorRecord.class;
    }

    /**
     * The column <code>wpg.operator.id</code>.
     */
    public final TableField<OperatorRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>wpg.operator.name</code>.
     */
    public final TableField<OperatorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>wpg.operator.tel</code>.
     */
    public final TableField<OperatorRecord, String> TEL = createField(DSL.name("tel"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>wpg.operator.addr</code>.
     */
    public final TableField<OperatorRecord, String> ADDR = createField(DSL.name("addr"), SQLDataType.VARCHAR(40), this, "");

    private TOperator(Name alias, Table<OperatorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TOperator(Name alias, Table<OperatorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>wpg.operator</code> table reference
     */
    public TOperator(String alias) {
        this(DSL.name(alias), OPERATOR);
    }

    /**
     * Create an aliased <code>wpg.operator</code> table reference
     */
    public TOperator(Name alias) {
        this(alias, OPERATOR);
    }

    /**
     * Create a <code>wpg.operator</code> table reference
     */
    public TOperator() {
        this(DSL.name("operator"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Wpg.WPG;
    }

    @Override
    public UniqueKey<OperatorRecord> getPrimaryKey() {
        return Keys.OPERATOR_PKEY;
    }

    @Override
    public TOperator as(String alias) {
        return new TOperator(DSL.name(alias), this);
    }

    @Override
    public TOperator as(Name alias) {
        return new TOperator(alias, this);
    }

    @Override
    public TOperator as(Table<?> alias) {
        return new TOperator(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOperator rename(String name) {
        return new TOperator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOperator rename(Name name) {
        return new TOperator(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOperator rename(Table<?> name) {
        return new TOperator(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperator where(Condition condition) {
        return new TOperator(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperator where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperator where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperator where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperator where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperator where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperator where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperator where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperator whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperator whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
