/*
 * This file is generated by jOOQ.
 */
package com.example.wpg.db.tables;


import com.example.wpg.db.Keys;
import com.example.wpg.db.Wpg;
import com.example.wpg.db.tables.records.OperatorRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Operator extends TableImpl<OperatorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wpg.operator</code>
     */
    public static final Operator OPERATOR = new Operator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperatorRecord> getRecordType() {
        return OperatorRecord.class;
    }

    /**
     * The column <code>wpg.operator.id</code>.
     */
    public final TableField<OperatorRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>wpg.operator.name</code>.
     */
    public final TableField<OperatorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>wpg.operator.tel</code>.
     */
    public final TableField<OperatorRecord, String> TEL = createField(DSL.name("tel"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>wpg.operator.addr</code>.
     */
    public final TableField<OperatorRecord, String> ADDR = createField(DSL.name("addr"), SQLDataType.VARCHAR(40), this, "");

    private Operator(Name alias, Table<OperatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Operator(Name alias, Table<OperatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>wpg.operator</code> table reference
     */
    public Operator(String alias) {
        this(DSL.name(alias), OPERATOR);
    }

    /**
     * Create an aliased <code>wpg.operator</code> table reference
     */
    public Operator(Name alias) {
        this(alias, OPERATOR);
    }

    /**
     * Create a <code>wpg.operator</code> table reference
     */
    public Operator() {
        this(DSL.name("operator"), null);
    }

    public <O extends Record> Operator(Table<O> child, ForeignKey<O, OperatorRecord> key) {
        super(child, key, OPERATOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Wpg.WPG;
    }

    @Override
    public UniqueKey<OperatorRecord> getPrimaryKey() {
        return Keys.OPERATOR_PK;
    }

    @Override
    public Operator as(String alias) {
        return new Operator(DSL.name(alias), this);
    }

    @Override
    public Operator as(Name alias) {
        return new Operator(alias, this);
    }

    @Override
    public Operator as(Table<?> alias) {
        return new Operator(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Operator rename(String name) {
        return new Operator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Operator rename(Name name) {
        return new Operator(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Operator rename(Table<?> name) {
        return new Operator(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
