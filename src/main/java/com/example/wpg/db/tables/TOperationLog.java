/*
 * This file is generated by jOOQ.
 */
package com.example.wpg.db.tables;


import com.example.wpg.db.Wpg;
import com.example.wpg.db.tables.records.OperationLogRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TOperationLog extends TableImpl<OperationLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wpg.operation_log</code>
     */
    public static final TOperationLog OPERATION_LOG = new TOperationLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperationLogRecord> getRecordType() {
        return OperationLogRecord.class;
    }

    /**
     * The column <code>wpg.operation_log.operation_time</code>.
     */
    public final TableField<OperationLogRecord, LocalDateTime> OPERATION_TIME = createField(DSL.name("operation_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>wpg.operation_log.operator</code>.
     */
    public final TableField<OperationLogRecord, String> OPERATOR = createField(DSL.name("operator"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>wpg.operation_log.operation_type</code>.
     */
    public final TableField<OperationLogRecord, String> OPERATION_TYPE = createField(DSL.name("operation_type"), SQLDataType.VARCHAR(10), this, "");

    private TOperationLog(Name alias, Table<OperationLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TOperationLog(Name alias, Table<OperationLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>wpg.operation_log</code> table reference
     */
    public TOperationLog(String alias) {
        this(DSL.name(alias), OPERATION_LOG);
    }

    /**
     * Create an aliased <code>wpg.operation_log</code> table reference
     */
    public TOperationLog(Name alias) {
        this(alias, OPERATION_LOG);
    }

    /**
     * Create a <code>wpg.operation_log</code> table reference
     */
    public TOperationLog() {
        this(DSL.name("operation_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Wpg.WPG;
    }

    @Override
    public TOperationLog as(String alias) {
        return new TOperationLog(DSL.name(alias), this);
    }

    @Override
    public TOperationLog as(Name alias) {
        return new TOperationLog(alias, this);
    }

    @Override
    public TOperationLog as(Table<?> alias) {
        return new TOperationLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOperationLog rename(String name) {
        return new TOperationLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOperationLog rename(Name name) {
        return new TOperationLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOperationLog rename(Table<?> name) {
        return new TOperationLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperationLog where(Condition condition) {
        return new TOperationLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperationLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperationLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperationLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperationLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperationLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperationLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOperationLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperationLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOperationLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
